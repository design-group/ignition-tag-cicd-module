
plugins {
    id "io.ia.sdk.modl" version "0.1.1" 
}

ext {
    sdk_version = "8.1.24"
}

allprojects {
    // cascade version, which will be set at command line in CI, down to subprojects
    version = rootProject.version
}

ignitionModule {
    /*
     * Human readable name of the module, as will be displayed on the gateway status page
     */
    name = "Tag CICD"

    /*
     * Name of the '.modl' file to be created, without file extension.
     */
    fileName = "Tag-CICD.modl"
    /*
     * Unique identifier for the module.  Reverse domain convention is recommended (e.g.: com.mycompany.charting-module)
     */
    id = "tag-cicd"

    moduleVersion = version
	license = "LICENSE"
    moduleDescription = "A module to provide Tag related CICD Endpoints"
    /*
     * Minimum version of Ignition required for the module to function correctly.  This typically won't change over
     * the course of a major Ignition (7.9, 8.0, etc) version, except for when the Ignition Platform adds/changes APIs
     * used by the module.
     */
    requiredIgnitionVersion = "8.0.10"
    /*
     *  This is a map of String: String, where the 'key' represents the fully qualified path to the project
     *  (using gradle path syntax), and the value is the shorthand Scope string.
     *  Example entry: [ ":gateway": "G", ":common": "GC", ":vision-client": "C" ]
     */
    projectScopes = [
		":common" : "GC",
        ":gateway" : "G"
    ]

    /*
     * Add your module dependencies here, following the examples, with scope being one or more of G, C or D,
     * for (G)ateway, (D)esigner, Vision (C)lient.
     *
     * Example Value:
     * moduleDependencies = [
           "com.inductiveautomation.vision": "CD",
           "com.inductiveautomation.opcua": "G"
     * ]
     */
    moduleDependencies = [ : ]

    /*
     * Map of fully qualified hook class to the shorthand scope.  Only one scope per hook class.
     *
     * Example entry: "com.myorganization.vectorizer.VectorizerDesignerHook": "D"
     */
    hooks = [
        "com.bwdesigngroup.ignition.tag_cicd.gateway.TagCICDGatewayHook" : "G"
    ]

    applyInductiveArtifactRepo = true
	// Set skipModlSigning to the value of gradle.properties value 'ignition.signing.skipModuleSigning' or default to 'false
	skipModlSigning = !findProperty("signModule").toString().toBoolean()
    /*
     * Optional 'documentation' settings.  Supply the files that would be desired to end up in the 'doc' dir of the
     * assembled module, and specify the path to the index.html file inside that folder. In this commented-out
     * example, the html files being collected are located in the module root project in `src/docs/`
     */
    // the files to collect into the documentation dir, with example implementation
    // documentationFiles.from(project.file("src/docs/"))

    // the path from the root documentation dir to the index file.
    // documentationIndex.set("index.html")

}

task deepClean() {
    dependsOn allprojects.collect { "${it.path}:clean" }
    description "Executes clean tasks and remove node plugin caches."
    doLast {
        delete(file(".gradle"))
    }
}

tasks.withType(io.ia.sdk.gradle.modl.task.Deploy).configureEach {
    hostGateway = project.hostGateway
}